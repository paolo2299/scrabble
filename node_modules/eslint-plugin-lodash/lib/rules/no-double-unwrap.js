/**
 * @fileoverview Rule to make sure value() wasn't called on a lodash chain twice
 */
'use strict';

/**
 * @fileoverview Rule to make sure value() wasn't called on a lodash chain twice
 */
// ------------------------------------------------------------------------------
// Rule Definition
// ------------------------------------------------------------------------------

module.exports = {
    meta: {
        fixable: "code"
    },
    create: function create(context) {
        var _require = require('../util/lodashUtil');

        var getLodashContext = _require.getLodashContext;
        var isChainBreaker = _require.isChainBreaker;
        var isChainable = _require.isChainable;

        var _require2 = require('../util/astUtil');

        var isMethodCall = _require2.isMethodCall;
        var getCaller = _require2.getCaller;
        var getMethodName = _require2.getMethodName;

        var lodashContext = getLodashContext(context);
        var version = lodashContext.version;
        var visitors = lodashContext.getImportVisitors();
        visitors.CallExpression = function (node) {
            if (lodashContext.isImplicitChainStart(node)) {
                (function () {
                    do {
                        node = node.parent.parent;
                    } while (isMethodCall(node) && !isChainBreaker(node, version));
                    var caller = getCaller(node);
                    if (isMethodCall(node) && !isChainable(caller, version)) {
                        context.report({
                            node: node,
                            message: 'Do not use .value() after chain-ending method {{method}}',
                            data: { method: getMethodName(caller) },
                            fix: function fix(fixer) {
                                return fixer.removeRange([caller.range[1], node.range[1]]);
                            }
                        });
                    }
                })();
            }
        };
        return visitors;
    }
};